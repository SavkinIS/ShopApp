@page "/Register"
@using System.ComponentModel.DataAnnotations
@using ShopApp.Models
@using ShopApp.Services
@inject AuthService AuthService
@inject NavigationManager NavigationManager
@inject Blazored.Toast.Services.IToastService ToastService
@inject CustomAuthenticationStateProvider AuthStateProvider
@implements IDisposable

<div class="container mt-5">
    <h3>Регистрация</h3>
    <EditForm Model="_registerModel" OnValidSubmit="HandleRegister">
        <DataAnnotationsValidator />
        <ValidationSummary class="text-danger" />

        <div class="form-group">
            <label>Email</label>
            <InputText @bind-Value="_registerModel.Email" class="form-control" placeholder="Email" />
        </div>
        <div class="form-group">
            <label>Имя пользователя</label>
            <InputText @bind-Value="_registerModel.Username" class="form-control" placeholder="Имя пользователя" />
        </div>
        <div class="form-group">
            <label>Полное имя</label>
            <InputText @bind-Value="_registerModel.FullName" class="form-control" placeholder="Полное имя" />
        </div>
        <div class="form-group">
            <label>Пароль</label>
            <InputText @bind-Value="_registerModel.Password" class="form-control" type="password" placeholder="Пароль" />
        </div>
        <div class="form-group">
            <label>Подтверждение пароля</label>
            <InputText @bind-Value="_registerModel.ConfirmPassword" class="form-control" type="password" placeholder="Подтверждение пароля" />
        </div>

        <div class="button-group">
            <button type="submit" class="btn btn-primary">Зарегистрироваться</button>
            <button type="button" class="btn btn-secondary" @onclick="NavigateToLogin">Уже есть аккаунт? Войти</button>
        </div>
    </EditForm>
</div>

@code {
    private RegisterModel _registerModel = new();

    protected override void OnInitialized()
    {
        AuthService.OnUserChanged += HandleUserChanged;
    }

    private async void HandleUserChanged()
    {
        var user = await AuthService.GetCurrentUserAsync();
        if (user != null)
        {
            NavigationManager.NavigateTo("/");
        }
    }

    public void Dispose()
    {
        AuthService.OnUserChanged -= HandleUserChanged;
    }

    private async Task HandleRegister()
    {
        var (success, error) = await AuthService.Register(_registerModel.Email, _registerModel.Password, _registerModel.ConfirmPassword);
        if (success)
        {
            ToastService.ShowSuccess("Registration successful!");
        }
        else
        {
            ToastService.ShowError($"Registration failed: {error}");
        }
    }

    private void NavigateToLogin()
    {
        NavigationManager.NavigateTo("/Login");
    }

    private class RegisterModel
    {
        [Required(ErrorMessage = "Email is required.")]
        [EmailAddress(ErrorMessage = "Invalid email address.")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "Password is required.")]
        [StringLength(100, MinimumLength = 6, ErrorMessage = "Password must be at least 6 characters long.")]
        public string Password { get; set; } = "";

        [Required(ErrorMessage = "Confirm password is required.")]
        [Compare("Password", ErrorMessage = "Passwords do not match.")]
        public string ConfirmPassword { get; set; } = "";

        [Required(ErrorMessage = "Username is required.")]
        [StringLength(50, MinimumLength = 3, ErrorMessage = "Username must be between 3 and 50 characters.")]
        public string Username { get; set; } = "";

        [Required(ErrorMessage = "Full name is required.")]
        [StringLength(100, MinimumLength = 2, ErrorMessage = "Full name must be between 2 and 100 characters.")]
        public string FullName { get; set; } = "";
    }
}