@page "/ProductList"
@using ShopApp.Models
@using ShopApp.Services
@inject CartService CartService
@inject ProductService ProductService
@inject NavigationManager NavigationManager

<div class="container mt-4">
    <h3 class="text-center mb-4">Our Products</h3>

    <!-- Поиск -->
    <div class="row mb-4">
        <div class="col-md-12">
            <label for="searchQuery" class="form-label">Search</label>
            <input id="searchQuery" type="text" class="form-control" placeholder="Search by name or description..." @bind="SearchQuery" />
        </div>
    </div>

    <!-- Фильтры -->
    <div class="row mb-4">
        <!-- Фильтр по категориям -->
        <div class="col-md-3">
            <label for="categoryFilter" class="form-label">Category</label>
            <select id="categoryFilter" class="form-select" @bind="SelectedCategory">
                <option value="">All Categories</option>
                @foreach (var category in Categories.Distinct())
                {
                    <option value="@category">@category</option>
                }
            </select>
        </div>

        <!-- Фильтр по брендам -->
        <div class="col-md-3">
            <h5>Brands</h5>
            @foreach (var brand in Brands.Distinct())
            {
                <div class="form-check">
                    <input type="checkbox" class="form-check-input" id="brand_@brand" value="@brand" @onchange="e => ToggleBrandSelection(e, brand)" checked="@SelectedBrands.Contains(brand)" />
                    <label class="form-check-label" for="brand_@brand">@brand</label>
                </div>
            }
        </div>

        <!-- Фильтр по странам -->
        <div class="col-md-3">
            <h5>Countries</h5>
            @foreach (var country in Countries.Distinct())
            {
                <div class="form-check">
                    <input type="checkbox" class="form-check-input" id="country_@country" value="@country" @onchange="e => ToggleCountrySelection(e, country)" checked="@SelectedCountries.Contains(country)" />
                    <label class="form-check-label" for="country_@country">@country</label>
                </div>
            }
        </div>

        <!-- Сортировка -->
        <div class="col-md-3">
            <label for="sortBy" class="form-label">Sort By</label>
            <select id="sortBy" class="form-select" @bind="SortBy">
                <option value="PriceAsc">Price: Low to High</option>
                <option value="PriceDesc">Price: High to Low</option>
                <option value="Name">Name</option>
            </select>
        </div>
    </div>

    <!-- Список продуктов -->
    <section class="production-holder">
        
        @if (FilteredProducts().Any())
        {
            @foreach (var product in FilteredProducts())
            {
                <div class="production-item">
                   
                <div class="card">
                    <a href="@($"/Product-item/{product.Id}")" target="_blank" style="display: block; width: 100%; height: 100%; color: inherit; text-decoration: none;">
                        <img src="@product.ImageUrl" class="card-img" alt="@product.Name" style="height: 200px; object-fit: cover;"/>
                        <div class="card-body">
                            <h5 class="card-title">@product.Name</h5>
                            <p class="card-text-desc">@product.Description</p>
                            <p class="card-text"><strong>Цвет:</strong> @product.Color</p>
                            <p class="card-text"><strong>Category:</strong> @product.Category</p>
                            <p class="card-text"><strong>Brand:</strong> @product.Brand</p>
                            <p class="card-text"><strong>Country:</strong> @product.Country</p>
                            <p class="card-text"><strong>Weight:</strong> @product.WeightGramm.ToString("##,###")</p>
                            <p class="card-text-price">@product.Price.ToString("C")</p>

                        </div>
                    </a>
                    <div class="production-item-inCart">
                        @if (ItemsInCart(product) > 0)
                        {
                        <div class="quantity-control">
                            <button class="quantity-btn minus" @onclick="() =>RemoveFromCart(product)">-</button>
                            <span class="quantity">@ItemsInCart(product)</span>
                            <button class="quantity-btn plus" @onclick="() => AddToCart(product)">+</button>
                        </div>
                        }
                        else
                        {
                        <button class="add-to-cart" @onclick="() => AddToCart(product)">Add to Cart</button>
                        }
                    </div>
                </div>
                </div>
            }
        }
        else
        {
            <p class="text-center">No products found.</p>
        }
    </section>
</div>

@code {
    
    private IEnumerable<Product>  Products = new List<Product>();
    
    protected override async Task OnInitializedAsync()
    {
        Products = await ProductService.GetProductsAsync();
    }

    private string SearchQuery = string.Empty;
    private string SelectedCategory = string.Empty;
    private HashSet<string> SelectedBrands = new();
    private HashSet<string> SelectedCountries = new();
    private string SortBy = "PriceAsc";

    private List<string> Categories => Products.Select(p => p.Category).Distinct().ToList();
    private List<string> Brands => Products.Select(p => p.Brand).Distinct().ToList();
    private List<string> Countries => Products.Select(p => p.Country).Distinct().ToList();

    private IEnumerable<Product> FilteredProducts()
    {
        var filtered = Products
            .Where(p => string.IsNullOrEmpty(SelectedCategory) || p.Category == SelectedCategory)
            .Where(p => !SelectedBrands.Any() || SelectedBrands.Contains(p.Brand))
            .Where(p => !SelectedCountries.Any() || SelectedCountries.Contains(p.Country))
            .Where(p => string.IsNullOrEmpty(SearchQuery) || 
                        p.Name.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase) || 
                        p.Description.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase));

        Console.WriteLine($"Filtered {filtered.Count()} products.");
        return SortBy switch
        {
            "PriceAsc" => filtered.OrderBy(p => p.Price),
            "PriceDesc" => filtered.OrderByDescending(p => p.Price),
            _ => filtered.OrderBy(p => p.Name)
        };
    }
    

    private async Task AddToCart(Product product)
    {
        await CartService.AddToCart(product);
    }

    private void ToggleBrandSelection(ChangeEventArgs e, string brand)
    {
        if ((e.Value as bool?) == true)
            SelectedBrands.Add(brand);
        else
            SelectedBrands.Remove(brand);
    }

    private void ToggleCountrySelection(ChangeEventArgs e, string country)
    {
        if ((e.Value as bool?) == true)
            SelectedCountries.Add(country);
        else
            SelectedCountries.Remove(country);
    }

    private int ItemsInCart(Product product)
    {
       return CartService.GetProductsCount(product);
    }

    private async Task RemoveFromCart(Product product)
    {
        await CartService.UpdateQuantity(product.Id, -1);
    }
    
    private void MoveTo(int itemProductId)
    {
        NavigationManager.NavigateTo($"/Product-item/{itemProductId}");
        ProductService.SetProductID(itemProductId); 
        //@onclick="() => MoveTo(product.Id)" 
}

}
