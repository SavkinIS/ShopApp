@page "/Cart"
@using ShopApp.Models
@using ShopApp.Services
@inject CartService CartService
@inject NavigationManager NavigationManager
@inject OrderService OrderService
@inject AuthService AuthService
@inject ProductService ProductService
@inject Blazored.Toast.Services.IToastService ToastService

<div class="container mt-5">
    <h3 class="mb-4">Ваша корзина</h3>

    @if (!isCartLoaded)
    {
        <div class="text-center">
            <p>Загрузка корзины...</p>
        </div>
    }
    else if (!(cartItems?.Any() ?? false))
    {
        <div class="alert alert-info text-center" role="alert">
            Ваша корзина пуста.
        </div>
    }
    else
    {
        <div class="cart-items">
            @foreach (var item in cartItems)
            {
                <div class="cart-card">
                    <img src="@item.ProductImageUrl" alt="@item.ProductName" class="cart-img" @onclick="() => MoveTo(item.ProductId)" />
                    <div class="cart-details">
                        <h5>@item.ProductName</h5>
                        <p>Цена: @item.Price.ToString("C")</p>
                        <div class="quantity-control">
                            <button class="btn btn-sm btn-outline-secondary" @onclick="() => UpdateQuantity(item.ProductId, -1)">-</button>
                            <span>@item.Quantity</span>
                            <button class="btn btn-sm btn-outline-secondary" @onclick="() => UpdateQuantity(item.ProductId, 1)">+</button>
                        </div>
                        <p>Итого: @item.Price * @item.Quantity</p>
                        <button class="btn btn-sm btn-danger" @onclick="() => RemoveItem(item.ProductId)">Удалить</button>
                    </div>
                </div>
            }
        </div>

        <div class="card mt-4">
            <div class="card-body">
                <h5 class="card-title">Итог заказа</h5>
                <p class="card-text">
                    <strong>Всего:</strong> @CartService.GetTotalPriceString()
                </p>
                <textarea class="form-control mb-3" @bind="@orderComment" placeholder="Добавьте комментарий к заказу..."></textarea>
                <div class="d-flex justify-content-between">
                    <button class="btn btn-warning" @onclick="ClearCart">Очистить корзину</button>
                    <button class="btn btn-success" @onclick="Checkout">Оформить заказ</button>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private List<OrderItemClient> cartItems = new();
    private string orderComment = "";
    private bool isCartLoaded = false;
    private AuthenticatedUser? currentUser;

    protected override async Task OnInitializedAsync()
    {
        currentUser = await AuthService.GetCurrentUserAsync();
        await CartService.LoadUser();
        await CartService.LoadCartAsync();
        cartItems = await CartService.GetItems();
        isCartLoaded = true;
    }

    private async Task UpdateQuantity(int productId, int delta)
    {
        await CartService.UpdateQuantity(productId, delta);
        cartItems = await CartService.GetItems();
        StateHasChanged();
    }

    private async Task RemoveItem(int productId)
    {
        await CartService.RemoveFromCart(productId);
        cartItems = await CartService.GetItems();
        StateHasChanged();
    }

    private async Task ClearCart()
    {
        await CartService.ClearCart();
        cartItems.Clear();
        ToastService.ShowSuccess("Cart cleared successfully!");
        StateHasChanged();
    }

    private async Task Checkout()
    {
        if (!(cartItems?.Any() ?? false))
        {
            ToastService.ShowWarning("Your cart is empty!");
            return;
        }

        currentUser = await AuthService.GetCurrentUserAsync();
        if (currentUser == null)
        {
            NavigationManager.NavigateTo("/Order?fromCart=true");
            return;
        }

        try
        {
            var order = new OrderClient
            {
                ClientId = currentUser.Id,
                Items = cartItems.Select(item => new OrderItemClient
                {
                    ProductId = item.ProductId,
                    ProductName = item.ProductName,
                    Quantity = item.Quantity,
                    Price = item.Price,
                    ProductImageUrl = item.ProductImageUrl
                    // Поля Id и OrderId оставляем равными 0, сервер их установит
                }).ToList(),
                Total = CartService.GetTotalPrice(),
                Comment = orderComment,
                Status = "Pending",
                CreatedDate = DateTime.Now
            };

            // Логируем объект перед отправкой
            Console.WriteLine($"Order before sending: {System.Text.Json.JsonSerializer.Serialize(order)}");

            await OrderService.SaveOrder(order);
            await CartService.ClearCart();
            cartItems.Clear();
            ToastService.ShowSuccess("Order placed successfully!");
            NavigationManager.NavigateTo("/OrderSuccess");
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Failed to place order: {ex.Message}");
        }
    }

    private void MoveTo(int productId)
    {
        NavigationManager.NavigateTo($"/Product-item/{productId}");
        ProductService.SetProductID(productId);
    }
}