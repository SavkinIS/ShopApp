@page "/Login"
@using System.ComponentModel.DataAnnotations
@using ShopApp.Services
@inject AuthService AuthService
@inject NavigationManager NavigationManager
@inject Blazored.Toast.Services.IToastService ToastService
@inject CustomAuthenticationStateProvider AuthStateProvider
@implements IDisposable

<div class="container mt-5">
    <h3>Вход</h3>
    <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
        <DataAnnotationsValidator/>
        <ValidationSummary class="text-danger"/>

        <div class="form-group">
            <label>Email</label>
            <InputText @bind-Value="loginModel.Email" class="form-control" placeholder="Email"/>
        </div>
        <div class="form-group">
            <label>Пароль</label>
            <InputText @bind-Value="loginModel.Password" class="form-control" type="password" placeholder="Пароль"/>
        </div>
        <div class="form-group">
            <label>
                <InputCheckbox @bind-Value="loginModel.RememberMe"/> Запомнить меня
            </label>
        </div>

        <div class="button-group">
            <button type="submit" class="btn btn-primary">Войти</button>
            <button type="button" class="btn btn-secondary" @onclick="NavigateToRegister">Нет аккаунта? Зарегистрироваться</button>
        </div>
    </EditForm>
</div>

@code {
    private LoginModel loginModel = new();

    protected override void OnInitialized()
    {
        AuthService.OnUserChanged += HandleUserChanged;
    }

    private async void HandleUserChanged()
    {
        var user = await AuthService.GetCurrentUserAsync();
        if (user != null)
        {
            NavigationManager.NavigateTo("/Profile");
        }
    }

    public void Dispose()
    {
        AuthService.OnUserChanged -= HandleUserChanged;
    }

    private async Task HandleLogin()
    {
        var (success, error) = await AuthService.Login(loginModel.Email, loginModel.Password, loginModel.RememberMe, AuthStateProvider);
        if (success)
        {
            ToastService.ShowSuccess("Login successful!");
        }
        else
        {
            ToastService.ShowError($"Login failed: {error}");
        }
    }

    private void NavigateToRegister()
    {
        NavigationManager.NavigateTo("/Register");
    }

    private class LoginModel
    {
        [Required(ErrorMessage = "Email is required.")]
        [EmailAddress(ErrorMessage = "Invalid email address.")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "Password is required.")]
        [StringLength(100, MinimumLength = 6, ErrorMessage = "Password must be at least 6 characters long.")]
        public string Password { get; set; } = "";

        public bool RememberMe { get; set; }
    }

}