@using ShopApp.Models
@inject AuthService AuthService
@inject NavigationManager NavigationManager
@inject Blazored.Toast.Services.IToastService ToastService
@inject CustomAuthenticationStateProvider AuthStateProvider
@implements IDisposable

<header>
    <div class="logo">Knitting Store</div>
    <button class="menu-button" @onclick="ToggleMenu">Menu</button>
    <nav class="@(collapseNavMenu ? "collapse" : "")">
        <NavLink class="nav-link" href="/Cart">
            <span class="oi oi-plus" aria-hidden="true"></span> Cart
        </NavLink>
        <NavLink class="nav-link" href="/ProductList">
            <span class="oi oi-list-rich" aria-hidden="true"></span> ProductList
        </NavLink>
        @if (currentUser == null)
        {
            <button class="nav-link btn-link" @onclick="ShowLoginModal">
                <span class="oi oi-account-login" aria-hidden="true"></span> Войти
            </button>
        }
        else
        {
            <NavLink class="nav-link" href="/Profile">
                <span class="oi oi-person" aria-hidden="true"></span> Profile
            </NavLink>
            <button class="nav-link btn-link" @onclick="Logout">Выйти</button>
        }
    </nav>
</header>

@if (showLoginModal)
{
    <div class="modal" @onclick="CloseLoginModal">
        <div class="modal-content" @onclick:stopPropagation>
            <h3>Вход</h3>
            <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
                <DataAnnotationsValidator/>
                <ValidationSummary/>
                <div class="form-group">
                    <label>Email</label>
                    <InputText @bind-Value="loginModel.Email" class="form-control" placeholder="Email"/>
                </div>
                <div class="form-group">
                    <label>Пароль</label>
                    <InputText @bind-Value="loginModel.Password" class="form-control" type="password" placeholder="Пароль"/>
                </div>
                <div class="form-group">
                    <label>
                        <InputCheckbox @bind-Value="loginModel.RememberMe"/> Запомнить меня
                    </label>
                </div>
                <button type="submit" class="btn btn-primary">Войти</button>
                <button type="button" class="btn btn-secondary" @onclick="ShowRegisterModal">Регистрация</button>
            </EditForm>
        </div>
    </div>
}

@code {
    private bool collapseNavMenu = false;
    private bool showLoginModal = false;
    private LoginModel loginModel = new();
    private AuthenticatedUser? currentUser;

    protected override async Task OnInitializedAsync()
    {
        currentUser = await AuthService.GetCurrentUserAsync();
        AuthService.OnUserChanged += UpdateUserState;
    }

    private async void UpdateUserState()
    {
        currentUser = await AuthService.GetCurrentUserAsync();
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        AuthService.OnUserChanged -= UpdateUserState;
    }

    private void ToggleMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private void ShowLoginModal()
    {
        showLoginModal = true;
    }

    private void CloseLoginModal()
    {
        showLoginModal = false;
        loginModel = new();
    }

    private void ShowRegisterModal()
    {
        CloseLoginModal();
        NavigationManager.NavigateTo("/Register");
    }

    private async Task HandleLogin()
    {
        var (success, error) = await AuthService.Login(loginModel.Email, loginModel.Password, loginModel.RememberMe, AuthStateProvider);
        if (success)
        {
            CloseLoginModal();
            ToastService.ShowSuccess("Login successful!");
        }
        else
        {
            ToastService.ShowError($"Login failed: {error}");
        }
    }

    private async Task Logout()
    {
        await AuthService.Logout(AuthStateProvider);
        ToastService.ShowSuccess("Logged out successfully!");
        NavigationManager.NavigateTo("/");
    }

    private class LoginModel
    {
        public string Email { get; set; } = "";
        public string Password { get; set; } = "";
        public bool RememberMe { get; set; }
    }

}